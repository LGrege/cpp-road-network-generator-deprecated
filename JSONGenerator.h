#pragma once
#ifndef __JSON_GENERATOR__
#define __JSON_GENERATOR__

#include <iostream>
#include <fstream>

#include "PostScriptIntWriter.h"
#include "EntityContainer.h"
#include <CGAL/Arr_segment_traits_2.h>
#include <CGAL/Arrangement_2.h>
#include <CGAL/Arr_walk_along_line_point_location.h>
#include "Clipper.h"

typedef CGAL::Arrangement_2<Traits_2>                           Arrangement_2;
typedef CGAL::Arr_walk_along_line_point_location<Arrangement_2> Walk_pl;

using namespace ClipperLib;
using namespace std;

/**
  * @class JSONGenerator
  *
  * @brief Static class used to generate Polygons from the line-segments
  *        gotten by the L-System and write them to a JSON / .txt -Files.
  *
  * @note JSON as well as .txt Output can be generated
  *
  * @author Lukas Gregori
  * @version $Revision: 1.0 $
  *
  * Contact: lukas.gregori@student.tugraz.at
  *
  *
  * -----------------------------------------------------------------
  * Copyright (C) Lukas Gregori, contact@lukasgregori.com
  *
  * This file is part of the road network generator RoadGen.
  *
  * RoadGen is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.

  * RoadGen is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.

  * You should have received a copy of the GNU General Public License
  * along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
  * -----------------------------------------------------------------
  *
  */
class JSONGenerator {

public:

	/** @brief Generate Polygons from segments and export them
	  *
	  * First generates polygons from the line segments gotten by the
	  * L-System, by using the "generatePolygons()"-Method.
	  *
	  * After doing so the polygons are written to a json-file.
	  *
	  * @param string file_name Name of the output file
	  *
	  */
	static void writeJSONOut(string file_name);

	/** @brief Writes the vector specified in the parameters to the
	  *        out files specified by the name (with additional counter).
	  *
	  * @note JSON Format
	  *
	  * @param string dir_name Name of output directory
	  * @param string file_name Name of the output file
	  * @param std::vector<std::vector<Point_2>> vec_out data that shall be written
	  *
	  */
	static void writePolyToJSON(string dir_name, string file_name, std::vector<std::vector<Point_2>> vec_out);

	/** @brief Writes all rivers stored in the entity-container to .txt files
	  *
	  * @note .txt Format
	  *
	  * @param string dir_name Name of output directory
	  * @param string file_name Name of the output file
	  * @param std::vector<std::vector<Point_2>> vec_out data that shall be written	*
	  */
	static void writePolyToTxt(string dir_name, string file_name, std::vector<std::vector<Point_2>> vec_out);

private:

	/** @brief Generate Polygons from linesegments
	  *
	  * Generates Polygons from the line-segments generated by the L-System.
	  * To do so a CGAL::2D-Arrangement is build up, which gives us the Polygons.
	  *
	  * To ge the streets, we shrink every polygon by a fixed amount, so that the
	  * borders to the next polygon represent the streets. To do so the Clipper-Lib
	  * was used: http://www.angusj.com/delphi/clipper.php
	  *
	  * @note http://www.angusj.com/delphi/clipper.php Used for shrinking polygons
	  *
	  */
	static void generatePolygons();

	/** @brief Classifies and convexifies the polygon generated by the generatePolygons Method
	  *
	  * The polygons generated by the generatePolygons method are convexified and
	  * classified according to their size and other parameters.
	  *
	  * @param PostScriptIntWriter& out_writer needed for writing the results to the pst file
	  *
	  */
	static void classifyPolygons(PostScriptIntWriter& out_writer);
};


#endif